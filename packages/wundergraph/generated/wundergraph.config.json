{
  "apiId": "",
  "environmentIds": [
    ""
  ],
  "api": {
    "enableGraphqlEndpoint": false,
    "operations": [
      {
        "content": "mutation CreatePost($input: db_PostCreateInput!) {\n  db_createOnePost(data: $input) {\n    id\n  }\n}",
        "name": "CreatePost",
        "path": "CreatePost",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"db_createOnePost\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}},\"additionalProperties\":false,\"required\":[\"id\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"input\":{\"$ref\":\"#/definitions/db_PostCreateInput\"}},\"additionalProperties\":false,\"required\":[\"input\"],\"definitions\":{\"db_PostCreateInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"body\":{\"type\":\"string\"},\"created_at\":{\"type\":[\"string\",\"null\"]},\"User\":{\"$ref\":\"#/definitions/db_UserCreateNestedOneWithoutPostInput\"}},\"required\":[\"body\",\"User\"]},\"db_UserCreateNestedOneWithoutPostInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"create\":{\"$ref\":\"#/definitions/db_UserCreateWithoutPostInput\"},\"connectOrCreate\":{\"$ref\":\"#/definitions/db_UserCreateOrConnectWithoutPostInput\"},\"connect\":{\"$ref\":\"#/definitions/db_UserWhereUniqueInput\"}}},\"db_UserCreateWithoutPostInput\":{\"additionalProperties\":false,\"type\":[\"object\",\"null\"],\"properties\":{\"username\":{\"type\":\"string\"},\"created_at\":{\"type\":[\"string\",\"null\"]}}},\"db_UserCreateOrConnectWithoutPostInput\":{\"additionalProperties\":false,\"type\":[\"object\",\"null\"],\"properties\":{\"where\":{\"$ref\":\"#/definitions/db_UserWhereUniqueInput\"},\"create\":{\"$ref\":\"#/definitions/db_UserCreateWithoutPostInput\"}}},\"db_UserWhereUniqueInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"id\":{\"type\":[\"integer\",\"null\"]},\"username\":{\"type\":[\"string\",\"null\"]}}}}}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"input\":{\"$ref\":\"#/definitions/db_PostCreateInput\"}},\"additionalProperties\":false,\"required\":[\"input\"],\"definitions\":{\"db_PostCreateInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"body\":{\"type\":\"string\"},\"created_at\":{\"type\":[\"string\",\"null\"]},\"User\":{\"$ref\":\"#/definitions/db_UserCreateNestedOneWithoutPostInput\"}},\"required\":[\"body\",\"User\"]},\"db_UserCreateNestedOneWithoutPostInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"create\":{\"$ref\":\"#/definitions/db_UserCreateWithoutPostInput\"},\"connectOrCreate\":{\"$ref\":\"#/definitions/db_UserCreateOrConnectWithoutPostInput\"},\"connect\":{\"$ref\":\"#/definitions/db_UserWhereUniqueInput\"}}},\"db_UserCreateWithoutPostInput\":{\"additionalProperties\":false,\"type\":[\"object\",\"null\"],\"properties\":{\"username\":{\"type\":\"string\"},\"created_at\":{\"type\":[\"string\",\"null\"]}}},\"db_UserCreateOrConnectWithoutPostInput\":{\"additionalProperties\":false,\"type\":[\"object\",\"null\"],\"properties\":{\"where\":{\"$ref\":\"#/definitions/db_UserWhereUniqueInput\"},\"create\":{\"$ref\":\"#/definitions/db_UserCreateWithoutPostInput\"}}},\"db_UserWhereUniqueInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"id\":{\"type\":[\"integer\",\"null\"]},\"username\":{\"type\":[\"string\",\"null\"]}}}}}",
        "operationType": 1,
        "engine": 0,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "mutation DeletePost($id: Int!) {\n  db_deleteOnePost(where: {id: $id}) {\n    id\n  }\n}",
        "name": "DeletePost",
        "path": "DeletePost",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"db_deleteOnePost\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}},\"additionalProperties\":false,\"required\":[\"id\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}},\"additionalProperties\":false,\"required\":[\"id\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}},\"additionalProperties\":false,\"required\":[\"id\"]}",
        "operationType": 1,
        "engine": 0,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query ReadPosts {\n  db_findManyPost(orderBy: {created_at: desc}) {\n    id\n    User {\n      username\n    }\n    body\n    created_at\n  }\n}",
        "name": "ReadPosts",
        "path": "ReadPosts",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"db_findManyPost\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"User\":{\"type\":\"object\",\"properties\":{\"username\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"username\"]},\"body\":{\"type\":\"string\"},\"created_at\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"User\",\"body\",\"created_at\"]}}},\"additionalProperties\":false,\"required\":[\"db_findManyPost\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false}",
        "operationType": 0,
        "engine": 0,
        "cacheConfig": {
          "enable": false,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      }
    ],
    "invalidOperationNames": [],
    "engineConfiguration": {
      "defaultFlushInterval": 500,
      "graphqlSchema": "\"\"\"\nThe @removeNullVariables directive allows you to remove variables with null value from your GraphQL Query or Mutation Operations.\n\nA potential use-case could be that you have a graphql upstream which is not accepting null values for variables.\nBy enabling this directive all variables with null values will be removed from upstream query.\n\nquery ($say: String, $name: String) @removeNullVariables {\n\thello(say: $say, name: $name)\n}\n\nDirective will transform variables json and remove top level null values.\n{ \"say\": null, \"name\": \"world\" }\n\nSo upstream will receive the following variables:\n\n{ \"name\": \"world\" }\n\"\"\"\ndirective @removeNullVariables on QUERY | MUTATION\n\ndirective @hooksVariable on VARIABLE_DEFINITION\n\ndirective @jsonSchema(\n  \"\"\"\n  The value of both of these keywords MUST be a string.\n  \n  Both of these keywords can be used to decorate a user interface with\n  information about the data produced by this user interface.  A title\n  will preferably be short, whereas a description will provide\n  explanation about the purpose of the instance described by this\n  schema.\n  \"\"\"\n  title: String\n  \"\"\"\n  The value of both of these keywords MUST be a string.\n  \n  Both of these keywords can be used to decorate a user interface with\n  information about the data produced by this user interface.  A title\n  will preferably be short, whereas a description will provide\n  explanation about the purpose of the instance described by this\n  schema.\n  \"\"\"\n  description: String\n  \"\"\"\n  The value of \"multipleOf\" MUST be a number, strictly greater than 0.\n  \n  A numeric instance is valid only if division by this keyword's value\n  results in an integer.\n  \"\"\"\n  multipleOf: Int\n  \"\"\"\n  The value of \"maximum\" MUST be a number, representing an inclusive\n  upper limit for a numeric instance.\n  \n  If the instance is a number, then this keyword validates only if the\n  instance is less than or exactly equal to \"maximum\".\n  \"\"\"\n  maximum: Int\n  \"\"\"\n  The value of \"exclusiveMaximum\" MUST be number, representing an\n  exclusive upper limit for a numeric instance.\n  \n  If the instance is a number, then the instance is valid only if it\n  has a value strictly less than (not equal to) \"exclusiveMaximum\".\n  \"\"\"\n  exclusiveMaximum: Int\n  \"\"\"\n  The value of \"minimum\" MUST be a number, representing an inclusive\n  lower limit for a numeric instance.\n  \n  If the instance is a number, then this keyword validates only if the\n  instance is greater than or exactly equal to \"minimum\".\n  \"\"\"\n  minimum: Int\n  \"\"\"\n  The value of \"exclusiveMinimum\" MUST be number, representing an\n  exclusive lower limit for a numeric instance.\n  \n  If the instance is a number, then the instance is valid only if it\n  has a value strictly greater than (not equal to) \"exclusiveMinimum\".\n  \"\"\"\n  exclusiveMinimum: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  A string instance is valid against this keyword if its length is less\n  than, or equal to, the value of this keyword.\n  \n  The length of a string instance is defined as the number of its\n  characters as defined by RFC 7159 [RFC7159].\n  \"\"\"\n  maxLength: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  A string instance is valid against this keyword if its length is\n  greater than, or equal to, the value of this keyword.\n  \n  The length of a string instance is defined as the number of its\n  characters as defined by RFC 7159 [RFC7159].\n  \n  Omitting this keyword has the same behavior as a value of 0.\n  \"\"\"\n  minLength: Int\n  \"\"\"\n  The value of this keyword MUST be a string.  This string SHOULD be a\n  valid regular expression, according to the ECMA 262 regular\n  expression dialect.\n  \n  A string instance is considered valid if the regular expression\n  matches the instance successfully.  Recall: regular expressions are\n  not implicitly anchored.\n  \"\"\"\n  pattern: String\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  An array instance is valid against \"maxItems\" if its size is less\n  than, or equal to, the value of this keyword.\n  \"\"\"\n  maxItems: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  An array instance is valid against \"minItems\" if its size is greater\n  than, or equal to, the value of this keyword.\n  \n  Omitting this keyword has the same behavior as a value of 0.\n  \"\"\"\n  minItems: Int\n  \"\"\"\n  The value of this keyword MUST be a boolean.\n  \n  If this keyword has boolean value false, the instance validates\n  successfully.  If it has boolean value true, the instance validates\n  successfully if all of its elements are unique.\n  \n  Omitting this keyword has the same behavior as a value of false.\n  \"\"\"\n  uniqueItems: Boolean\n  commonPattern: COMMON_REGEX_PATTERN\n  \"\"\"Optional field to apply the JSON schema to\"\"\"\n  on: String\n) repeatable on VARIABLE_DEFINITION\n\ndirective @rbac(\n  \"\"\"the user must match all roles\"\"\"\n  requireMatchAll: [WG_ROLE]\n  \"\"\"the user must match at least one of the roles\"\"\"\n  requireMatchAny: [WG_ROLE]\n  \"\"\"the user must not match all of the roles\"\"\"\n  denyMatchAll: [WG_ROLE]\n  \"\"\"the user must not match any of the roles\"\"\"\n  denyMatchAny: [WG_ROLE]\n) on QUERY | MUTATION | SUBSCRIPTION\n\n\"\"\"\nThe @fromClaim directive sets the variable to the value retrieved from the given a claim.\nAdding this directive makes the operation require authentication.\n\"\"\"\ndirective @fromClaim(name: WG_CLAIM, on: String = \"\") repeatable on VARIABLE_DEFINITION\n\n\"\"\"\nThe directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.\nThis variable MUST be a string compatible scalar. \n\nThe default format, is: ISO 8601\nIf no format is chosen, the default format is used.\nCustom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.\n\"\"\"\ndirective @injectCurrentDateTime(\n  format: WunderGraphDateTimeFormat = ISO8601\n  \"\"\"\n  customFormat must conform to the Golang specification for specifying a date time format\n  \"\"\"\n  customFormat: String\n  on: String = \"\"\n) repeatable on VARIABLE_DEFINITION\n\n\"\"\"\nThe directive @injectGeneratedUUID injects a generated UUID into the variable.\nThis variable MUST be a string.\nAt the same time, it removes the variable from the input definition,\ndisallowing the user to supply it.\n\nThis means, the UUID is 100% generated server-side and can be considered untempered.\n\"\"\"\ndirective @injectGeneratedUUID(on: String = \"\") repeatable on VARIABLE_DEFINITION\n\n\"\"\"\nThe @internalOperation Directive marks an Operation as internal.\nBy doing so, the Operation is no longer accessible from the public API.\nIt can only be accessed by internal services, like hooks.\n\"\"\"\ndirective @internalOperation on QUERY | MUTATION | SUBSCRIPTION\n\n\"\"\"\nThe directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition.\n\"\"\"\ndirective @injectEnvironmentVariable(name: String!, on: String = \"\") repeatable on VARIABLE_DEFINITION\n\n\"\"\"\nThe @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.\nAs the execution is depth first, a field can only be used after it has been exported.\nAdditionally, a field can only be used after using the '_join' field or on a different data source.\nIt's not possible to export a field and use it in for the same data source.\n\nNote that the @export directive only works on fields that return a single value.\nIt's not possible to export a list or object field.\n\"\"\"\ndirective @export(\n  \"\"\"The argument 'as' is the name of the variable to export the field to.\"\"\"\n  as: String!\n) on FIELD\n\n\"\"\"\nThe directive @internal marks a variable definition as internal so that clients can't access it.\nThe field is also not visible in the public API.\nIt's only being used as an internal variable to export fields into.\n\"\"\"\ndirective @internal on VARIABLE_DEFINITION\n\n\"\"\"\nThe @transform directive allows to apply transformations to the response.\nBy applying the directive, the shape of the response can be altered,\nwhich will also modify the JSON-Schema of the response.\nThat is, you will keep full type safety and code-generation for transformed fields.\n\"\"\"\ndirective @transform(\n  \"\"\"\n  Using the 'get' transformation allows you to extract a nested field using a JSON path.\n  This is useful to unnest data, e.g. when using the '_join' field, which adds an extra layer of nesting.\n  \n  Example:\n  \n  query GetName {\n      name: me @transform(get: \"info.name\") {\n          info {\n              name\n          }\n      }\n  }\n  \n  Before the transformation, the resolve looks like this:\n  \n  {\n      \"name\": {\n          \"info\": {\n              \"name\": \"John Doe\"\n          }\n      }\n  }\n  \n  With the transformation applied, the response will be reshaped like this:\n  \n  {\n      \"name\": \"John Doe\"\n  }\n  \"\"\"\n  get: String\n) on FIELD\n\ninput db_NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: db_NestedIntFilter\n}\n\ninput db_IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: db_NestedIntFilter\n}\n\ninput db_NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: db_NestedStringFilter\n}\n\ninput db_StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: db_NestedStringFilter\n}\n\ninput db_NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: db_NestedDateTimeFilter\n}\n\ninput db_DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: db_NestedDateTimeFilter\n}\n\ninput db_PostListRelationFilter {\n  every: db_PostWhereInput\n  some: db_PostWhereInput\n  none: db_PostWhereInput\n}\n\ninput db_UserWhereInput {\n  AND: db_UserWhereInput\n  OR: [db_UserWhereInput]\n  NOT: db_UserWhereInput\n  id: db_IntFilter\n  username: db_StringFilter\n  created_at: db_DateTimeFilter\n  Post: db_PostListRelationFilter\n}\n\ninput db_UserRelationFilter {\n  is: db_UserWhereInput\n  isNot: db_UserWhereInput\n}\n\ninput db_PostWhereInput {\n  AND: db_PostWhereInput\n  OR: [db_PostWhereInput]\n  NOT: db_PostWhereInput\n  id: db_IntFilter\n  body: db_StringFilter\n  author_id: db_IntFilter\n  created_at: db_DateTimeFilter\n  User: db_UserRelationFilter\n}\n\nenum db_SortOrder {\n  asc\n  desc\n}\n\ninput db_PostOrderByRelationAggregateInput {\n  _count: db_SortOrder\n}\n\ninput db_UserOrderByWithRelationInput {\n  id: db_SortOrder\n  username: db_SortOrder\n  created_at: db_SortOrder\n  Post: db_PostOrderByRelationAggregateInput\n}\n\ninput db_PostOrderByWithRelationInput {\n  id: db_SortOrder\n  body: db_SortOrder\n  author_id: db_SortOrder\n  created_at: db_SortOrder\n  User: db_UserOrderByWithRelationInput\n}\n\ninput db_PostWhereUniqueInput {\n  id: Int\n}\n\nenum db_PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype db_UserCountOutputType {\n  Post: Int!\n  _join: Query!\n}\n\ntype db_User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: db_PostWhereInput, orderBy: [db_PostOrderByWithRelationInput], cursor: db_PostWhereUniqueInput, take: Int, skip: Int, distinct: [db_PostScalarFieldEnum]): [db_Post]\n  _count: db_UserCountOutputType!\n  _join: Query!\n}\n\ntype db_Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: db_User!\n  _join: Query!\n}\n\ntype db_PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n  _join: Query!\n}\n\ntype db_PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n  _join: Query!\n}\n\ntype db_PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n  _join: Query!\n}\n\ntype db_PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n  _join: Query!\n}\n\ntype db_PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n  _join: Query!\n}\n\ntype db_AggregatePost {\n  _count: db_PostCountAggregateOutputType\n  _avg: db_PostAvgAggregateOutputType\n  _sum: db_PostSumAggregateOutputType\n  _min: db_PostMinAggregateOutputType\n  _max: db_PostMaxAggregateOutputType\n  _join: Query!\n}\n\ninput db_PostCountOrderByAggregateInput {\n  id: db_SortOrder\n  body: db_SortOrder\n  author_id: db_SortOrder\n  created_at: db_SortOrder\n}\n\ninput db_PostAvgOrderByAggregateInput {\n  id: db_SortOrder\n  author_id: db_SortOrder\n}\n\ninput db_PostMaxOrderByAggregateInput {\n  id: db_SortOrder\n  body: db_SortOrder\n  author_id: db_SortOrder\n  created_at: db_SortOrder\n}\n\ninput db_PostMinOrderByAggregateInput {\n  id: db_SortOrder\n  body: db_SortOrder\n  author_id: db_SortOrder\n  created_at: db_SortOrder\n}\n\ninput db_PostSumOrderByAggregateInput {\n  id: db_SortOrder\n  author_id: db_SortOrder\n}\n\ninput db_PostOrderByWithAggregationInput {\n  id: db_SortOrder\n  body: db_SortOrder\n  author_id: db_SortOrder\n  created_at: db_SortOrder\n  _count: db_PostCountOrderByAggregateInput\n  _avg: db_PostAvgOrderByAggregateInput\n  _max: db_PostMaxOrderByAggregateInput\n  _min: db_PostMinOrderByAggregateInput\n  _sum: db_PostSumOrderByAggregateInput\n}\n\ninput db_NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: db_NestedFloatFilter\n}\n\ninput db_NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: db_NestedIntWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _avg: db_NestedFloatFilter\n  _sum: db_NestedIntFilter\n  _min: db_NestedIntFilter\n  _max: db_NestedIntFilter\n}\n\ninput db_IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: db_NestedIntWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _avg: db_NestedFloatFilter\n  _sum: db_NestedIntFilter\n  _min: db_NestedIntFilter\n  _max: db_NestedIntFilter\n}\n\ninput db_NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: db_NestedStringWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _min: db_NestedStringFilter\n  _max: db_NestedStringFilter\n}\n\ninput db_StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: db_NestedStringWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _min: db_NestedStringFilter\n  _max: db_NestedStringFilter\n}\n\ninput db_NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: db_NestedDateTimeWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _min: db_NestedDateTimeFilter\n  _max: db_NestedDateTimeFilter\n}\n\ninput db_DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: db_NestedDateTimeWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _min: db_NestedDateTimeFilter\n  _max: db_NestedDateTimeFilter\n}\n\ninput db_PostScalarWhereWithAggregatesInput {\n  AND: db_PostScalarWhereWithAggregatesInput\n  OR: [db_PostScalarWhereWithAggregatesInput]\n  NOT: db_PostScalarWhereWithAggregatesInput\n  id: db_IntWithAggregatesFilter\n  body: db_StringWithAggregatesFilter\n  author_id: db_IntWithAggregatesFilter\n  created_at: db_DateTimeWithAggregatesFilter\n}\n\ntype db_PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: db_PostCountAggregateOutputType\n  _avg: db_PostAvgAggregateOutputType\n  _sum: db_PostSumAggregateOutputType\n  _min: db_PostMinAggregateOutputType\n  _max: db_PostMaxAggregateOutputType\n  _join: Query!\n}\n\ninput db_UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum db_UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype db_UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n  _join: Query!\n}\n\ntype db_UserAvgAggregateOutputType {\n  id: Float\n  _join: Query!\n}\n\ntype db_UserSumAggregateOutputType {\n  id: Int\n  _join: Query!\n}\n\ntype db_UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n  _join: Query!\n}\n\ntype db_UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n  _join: Query!\n}\n\ntype db_AggregateUser {\n  _count: db_UserCountAggregateOutputType\n  _avg: db_UserAvgAggregateOutputType\n  _sum: db_UserSumAggregateOutputType\n  _min: db_UserMinAggregateOutputType\n  _max: db_UserMaxAggregateOutputType\n  _join: Query!\n}\n\ninput db_UserCountOrderByAggregateInput {\n  id: db_SortOrder\n  username: db_SortOrder\n  created_at: db_SortOrder\n}\n\ninput db_UserAvgOrderByAggregateInput {\n  id: db_SortOrder\n}\n\ninput db_UserMaxOrderByAggregateInput {\n  id: db_SortOrder\n  username: db_SortOrder\n  created_at: db_SortOrder\n}\n\ninput db_UserMinOrderByAggregateInput {\n  id: db_SortOrder\n  username: db_SortOrder\n  created_at: db_SortOrder\n}\n\ninput db_UserSumOrderByAggregateInput {\n  id: db_SortOrder\n}\n\ninput db_UserOrderByWithAggregationInput {\n  id: db_SortOrder\n  username: db_SortOrder\n  created_at: db_SortOrder\n  _count: db_UserCountOrderByAggregateInput\n  _avg: db_UserAvgOrderByAggregateInput\n  _max: db_UserMaxOrderByAggregateInput\n  _min: db_UserMinOrderByAggregateInput\n  _sum: db_UserSumOrderByAggregateInput\n}\n\ninput db_UserScalarWhereWithAggregatesInput {\n  AND: db_UserScalarWhereWithAggregatesInput\n  OR: [db_UserScalarWhereWithAggregatesInput]\n  NOT: db_UserScalarWhereWithAggregatesInput\n  id: db_IntWithAggregatesFilter\n  username: db_StringWithAggregatesFilter\n  created_at: db_DateTimeWithAggregatesFilter\n}\n\ntype db_UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: db_UserCountAggregateOutputType\n  _avg: db_UserAvgAggregateOutputType\n  _sum: db_UserSumAggregateOutputType\n  _min: db_UserMinAggregateOutputType\n  _max: db_UserMaxAggregateOutputType\n  _join: Query!\n}\n\ntype Query {\n  db_findFirstPost(where: db_PostWhereInput, orderBy: [db_PostOrderByWithRelationInput], cursor: db_PostWhereUniqueInput, take: Int, skip: Int, distinct: [db_PostScalarFieldEnum]): db_Post\n  db_findManyPost(where: db_PostWhereInput, orderBy: [db_PostOrderByWithRelationInput], cursor: db_PostWhereUniqueInput, take: Int, skip: Int, distinct: [db_PostScalarFieldEnum]): [db_Post]!\n  db_aggregatePost(where: db_PostWhereInput, orderBy: [db_PostOrderByWithRelationInput], cursor: db_PostWhereUniqueInput, take: Int, skip: Int): db_AggregatePost!\n  db_groupByPost(where: db_PostWhereInput, orderBy: [db_PostOrderByWithAggregationInput], by: [db_PostScalarFieldEnum]!, having: db_PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_PostGroupByOutputType]!\n  db_findUniquePost(where: db_PostWhereUniqueInput!): db_Post\n  db_findFirstUser(where: db_UserWhereInput, orderBy: [db_UserOrderByWithRelationInput], cursor: db_UserWhereUniqueInput, take: Int, skip: Int, distinct: [db_UserScalarFieldEnum]): db_User\n  db_findManyUser(where: db_UserWhereInput, orderBy: [db_UserOrderByWithRelationInput], cursor: db_UserWhereUniqueInput, take: Int, skip: Int, distinct: [db_UserScalarFieldEnum]): [db_User]!\n  db_aggregateUser(where: db_UserWhereInput, orderBy: [db_UserOrderByWithRelationInput], cursor: db_UserWhereUniqueInput, take: Int, skip: Int): db_AggregateUser!\n  db_groupByUser(where: db_UserWhereInput, orderBy: [db_UserOrderByWithAggregationInput], by: [db_UserScalarFieldEnum]!, having: db_UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_UserGroupByOutputType]!\n  db_findUniqueUser(where: db_UserWhereUniqueInput!): db_User\n  db_queryRaw(query: String!, parameters: [String]): [_Row!]!\n  db_queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput db_UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput db_UserCreateOrConnectWithoutPostInput {\n  where: db_UserWhereUniqueInput!\n  create: db_UserCreateWithoutPostInput!\n}\n\ninput db_UserCreateNestedOneWithoutPostInput {\n  create: db_UserCreateWithoutPostInput\n  connectOrCreate: db_UserCreateOrConnectWithoutPostInput\n  connect: db_UserWhereUniqueInput\n}\n\ninput db_PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: db_UserCreateNestedOneWithoutPostInput!\n}\n\ninput db_StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput db_DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput db_UserUpdateWithoutPostInput {\n  username: db_StringFieldUpdateOperationsInput\n  created_at: db_DateTimeFieldUpdateOperationsInput\n}\n\ninput db_UserUpsertWithoutPostInput {\n  update: db_UserUpdateWithoutPostInput!\n  create: db_UserCreateWithoutPostInput!\n}\n\ninput db_UserUpdateOneRequiredWithoutPostInput {\n  create: db_UserCreateWithoutPostInput\n  connectOrCreate: db_UserCreateOrConnectWithoutPostInput\n  upsert: db_UserUpsertWithoutPostInput\n  connect: db_UserWhereUniqueInput\n  update: db_UserUpdateWithoutPostInput\n}\n\ninput db_PostUpdateInput {\n  body: db_StringFieldUpdateOperationsInput\n  created_at: db_DateTimeFieldUpdateOperationsInput\n  User: db_UserUpdateOneRequiredWithoutPostInput\n}\n\ninput db_PostUpdateManyMutationInput {\n  body: db_StringFieldUpdateOperationsInput\n  created_at: db_DateTimeFieldUpdateOperationsInput\n}\n\ntype db_AffectedRowsOutput {\n  count: Int!\n  _join: Query!\n}\n\ninput db_PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput db_PostCreateOrConnectWithoutUserInput {\n  where: db_PostWhereUniqueInput!\n  create: db_PostCreateWithoutUserInput!\n}\n\ninput db_PostCreateNestedManyWithoutUserInput {\n  create: db_PostCreateWithoutUserInput\n  connectOrCreate: db_PostCreateOrConnectWithoutUserInput\n  connect: db_PostWhereUniqueInput\n}\n\ninput db_UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: db_PostCreateNestedManyWithoutUserInput\n}\n\ninput db_PostUpdateWithoutUserInput {\n  body: db_StringFieldUpdateOperationsInput\n  created_at: db_DateTimeFieldUpdateOperationsInput\n}\n\ninput db_PostUpsertWithWhereUniqueWithoutUserInput {\n  where: db_PostWhereUniqueInput!\n  update: db_PostUpdateWithoutUserInput!\n  create: db_PostCreateWithoutUserInput!\n}\n\ninput db_PostUpdateWithWhereUniqueWithoutUserInput {\n  where: db_PostWhereUniqueInput!\n  data: db_PostUpdateWithoutUserInput!\n}\n\ninput db_PostScalarWhereInput {\n  AND: db_PostScalarWhereInput\n  OR: [db_PostScalarWhereInput]\n  NOT: db_PostScalarWhereInput\n  id: db_IntFilter\n  body: db_StringFilter\n  author_id: db_IntFilter\n  created_at: db_DateTimeFilter\n}\n\ninput db_PostUpdateManyWithWhereWithoutUserInput {\n  where: db_PostScalarWhereInput!\n  data: db_PostUpdateManyMutationInput!\n}\n\ninput db_PostUpdateManyWithoutUserInput {\n  create: db_PostCreateWithoutUserInput\n  connectOrCreate: db_PostCreateOrConnectWithoutUserInput\n  upsert: db_PostUpsertWithWhereUniqueWithoutUserInput\n  set: db_PostWhereUniqueInput\n  disconnect: db_PostWhereUniqueInput\n  delete: db_PostWhereUniqueInput\n  connect: db_PostWhereUniqueInput\n  update: db_PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: db_PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: db_PostScalarWhereInput\n}\n\ninput db_UserUpdateInput {\n  username: db_StringFieldUpdateOperationsInput\n  created_at: db_DateTimeFieldUpdateOperationsInput\n  Post: db_PostUpdateManyWithoutUserInput\n}\n\ninput db_UserUpdateManyMutationInput {\n  username: db_StringFieldUpdateOperationsInput\n  created_at: db_DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  db_createOnePost(data: db_PostCreateInput!): db_Post\n  db_upsertOnePost(where: db_PostWhereUniqueInput!, create: db_PostCreateInput!, update: db_PostUpdateInput!): db_Post\n  db_deleteOnePost(where: db_PostWhereUniqueInput!): db_Post\n  db_updateOnePost(data: db_PostUpdateInput!, where: db_PostWhereUniqueInput!): db_Post\n  db_updateManyPost(data: db_PostUpdateManyMutationInput!, where: db_PostWhereInput): db_AffectedRowsOutput\n  db_deleteManyPost(where: db_PostWhereInput): db_AffectedRowsOutput\n  db_createOneUser(data: db_UserCreateInput!): db_User\n  db_upsertOneUser(where: db_UserWhereUniqueInput!, create: db_UserCreateInput!, update: db_UserUpdateInput!): db_User\n  db_deleteOneUser(where: db_UserWhereUniqueInput!): db_User\n  db_updateOneUser(data: db_UserUpdateInput!, where: db_UserWhereUniqueInput!): db_User\n  db_updateManyUser(data: db_UserUpdateManyMutationInput!, where: db_UserWhereInput): db_AffectedRowsOutput\n  db_deleteManyUser(where: db_UserWhereInput): db_AffectedRowsOutput\n  db_executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar db_Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n  _join: Query!\n}\n\nenum COMMON_REGEX_PATTERN {\n  EMAIL\n  DOMAIN\n}\n\nenum WG_ROLE {\n  admin\n  user\n}\n\n\"\"\"Well known claims - https://www.iana.org/assignments/jwt/jwt.xhtml\"\"\"\nenum WG_CLAIM {\n  \"\"\"iss\"\"\"\n  ISSUER\n  \"\"\"deprecated alias for ISSUER\"\"\"\n  PROVIDER\n  \"\"\"sub\"\"\"\n  SUBJECT\n  \"\"\"alias for sub\"\"\"\n  USERID\n  \"\"\"name\"\"\"\n  NAME\n  \"\"\"given_name\"\"\"\n  GIVEN_NAME\n  \"\"\"family_name\"\"\"\n  FAMILY_NAME\n  \"\"\"middle_name\"\"\"\n  MIDDLE_NAME\n  \"\"\"nickname\"\"\"\n  NICKNAME\n  \"\"\"preferred_username\"\"\"\n  PREFERRED_USERNAME\n  \"\"\"profile\"\"\"\n  PROFILE\n  \"\"\"picture\"\"\"\n  PICTURE\n  \"\"\"website\"\"\"\n  WEBSITE\n  \"\"\"email\"\"\"\n  EMAIL\n  \"\"\"email_verified\"\"\"\n  EMAIL_VERIFIED\n  \"\"\"gender\"\"\"\n  GENDER\n  \"\"\"birthdate\"\"\"\n  BIRTH_DATE\n  \"\"\"zoneinfo\"\"\"\n  ZONE_INFO\n  \"\"\"locale\"\"\"\n  LOCALE\n  \"\"\"location\"\"\"\n  LOCATION\n}\n\nenum WunderGraphDateTimeFormat {\n  \"\"\"2006-01-02T15:04:05-0700\"\"\"\n  ISO8601\n  \"\"\"Mon Jan _2 15:04:05 2006\"\"\"\n  ANSIC\n  \"\"\"Mon Jan _2 15:04:05 MST 2006\"\"\"\n  UnixDate\n  \"\"\"Mon Jan 02 15:04:05 -0700 2006\"\"\"\n  RubyDate\n  \"\"\"02 Jan 06 15:04 MST\"\"\"\n  RFC822\n  \"\"\"02 Jan 06 15:04 -0700\"\"\"\n  RFC822Z\n  \"\"\"Monday, 02-Jan-06 15:04:05 MST\"\"\"\n  RFC850\n  \"\"\"Mon, 02 Jan 2006 15:04:05 MST\"\"\"\n  RFC1123\n  \"\"\"Mon, 02 Jan 2006 15:04:05 -0700\"\"\"\n  RFC1123Z\n  \"\"\"2006-01-02T15:04:05Z07:00\"\"\"\n  RFC3339\n  \"\"\"2006-01-02T15:04:05.999999999Z07:00\"\"\"\n  RFC3339Nano\n  \"\"\"3:04PM\"\"\"\n  Kitchen\n  \"\"\"Jan _2 15:04:05\"\"\"\n  Stamp\n  \"\"\"Jan _2 15:04:05.000\"\"\"\n  StampMilli\n  \"\"\"Jan _2 15:04:05.000000\"\"\"\n  StampMicro\n  \"\"\"Jan _2 15:04:05.000000000\"\"\"\n  StampNano\n}",
      "datasourceConfigurations": [
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findFirstPost"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findManyPost"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_aggregatePost"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_groupByPost"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findUniquePost"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findFirstUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findManyUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_aggregateUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_groupByUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findUniqueUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_queryRaw"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_queryRawJSON"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_createOnePost"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_upsertOnePost"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_deleteOnePost"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_updateOnePost"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_updateManyPost"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_deleteManyPost"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_createOneUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_upsertOneUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_deleteOneUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_updateOneUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_updateManyUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_deleteManyUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 7,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_executeRaw"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "Post"
              ]
            },
            {
              "typeName": "db_User",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "Post",
                "_count"
              ]
            },
            {
              "typeName": "db_Post",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "User"
              ]
            },
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "id",
                "author_id"
              ]
            },
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "id",
                "body",
                "author_id",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_all"
              ]
            },
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at"
              ]
            },
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "username",
                "created_at",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            },
            {
              "typeName": "db__Row",
              "fieldNames": [
                "ID",
                "Int",
                "Float",
                "String",
                "Boolean",
                "DateTime",
                "JSON",
                "Object",
                "Array",
                "OptionalID",
                "OptionalInt",
                "OptionalFloat",
                "OptionalString",
                "OptionalBoolean",
                "OptionalDateTime",
                "OptionalJSON",
                "OptionalObject",
                "OptionalArray"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "file:../database/dev.sqlite"
            },
            "prismaSchema": "model Post {\n  id         Int      @id @default(autoincrement())\n  body       String\n  author_id  Int\n  created_at DateTime @default(now())\n  User       User     @relation(fields: [author_id], references: [id])\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  username   String   @unique\n  created_at DateTime @default(now())\n  Post       Post[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput PostListRelationFilter {\n  every: PostWhereInput\n  some: PostWhereInput\n  none: PostWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  username: StringFilter\n  created_at: DateTimeFilter\n  Post: PostListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput PostWhereInput {\n  AND: PostWhereInput\n  OR: [PostWhereInput]\n  NOT: PostWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput PostOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  Post: PostOrderByRelationAggregateInput\n}\n\ninput PostOrderByWithRelationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput PostWhereUniqueInput {\n  id: Int\n}\n\nenum PostScalarFieldEnum {\n  id\n  body\n  author_id\n  created_at\n}\n\ntype UserCountOutputType {\n  Post: Int!\n}\n\ntype User {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  Post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]\n  _count: UserCountOutputType!\n}\n\ntype Post {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  User: User!\n}\n\ntype PostCountAggregateOutputType {\n  id: Int!\n  body: Int!\n  author_id: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype PostAvgAggregateOutputType {\n  id: Float\n  author_id: Float\n}\n\ntype PostSumAggregateOutputType {\n  id: Int\n  author_id: Int\n}\n\ntype PostMinAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype PostMaxAggregateOutputType {\n  id: Int\n  body: String\n  author_id: Int\n  created_at: DateTime\n}\n\ntype AggregatePost {\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput PostCountOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostAvgOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostMaxOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostMinOrderByAggregateInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n}\n\ninput PostSumOrderByAggregateInput {\n  id: SortOrder\n  author_id: SortOrder\n}\n\ninput PostOrderByWithAggregationInput {\n  id: SortOrder\n  body: SortOrder\n  author_id: SortOrder\n  created_at: SortOrder\n  _count: PostCountOrderByAggregateInput\n  _avg: PostAvgOrderByAggregateInput\n  _max: PostMaxOrderByAggregateInput\n  _min: PostMinOrderByAggregateInput\n  _sum: PostSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput PostScalarWhereWithAggregatesInput {\n  AND: PostScalarWhereWithAggregatesInput\n  OR: [PostScalarWhereWithAggregatesInput]\n  NOT: PostScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  body: StringWithAggregatesFilter\n  author_id: IntWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype PostGroupByOutputType {\n  id: Int!\n  body: String!\n  author_id: Int!\n  created_at: DateTime!\n  _count: PostCountAggregateOutputType\n  _avg: PostAvgAggregateOutputType\n  _sum: PostSumAggregateOutputType\n  _min: PostMinAggregateOutputType\n  _max: PostMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  username: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  username\n  created_at\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  username: Int!\n  created_at: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  username: String\n  created_at: DateTime\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  username: SortOrder\n  created_at: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  username: StringWithAggregatesFilter\n  created_at: DateTimeWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  username: String!\n  created_at: DateTime!\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): Post\n  findManyPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum]): [Post]!\n  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!\n  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput], by: [PostScalarFieldEnum]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupByOutputType]!\n  findUniquePost(where: PostWhereUniqueInput!): Post\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n  queryRaw(query: String!, parameters: [String]): [_Row!]!\n  queryRawJSON(query: String!, parameters: [String]): JSON\n}\n\ninput UserCreateWithoutPostInput {\n  username: String!\n  created_at: DateTime\n}\n\ninput UserCreateOrConnectWithoutPostInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserCreateNestedOneWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  connect: UserWhereUniqueInput\n}\n\ninput PostCreateInput {\n  body: String!\n  created_at: DateTime\n  User: UserCreateNestedOneWithoutPostInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput UserUpdateWithoutPostInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutPostInput {\n  update: UserUpdateWithoutPostInput!\n  create: UserCreateWithoutPostInput!\n}\n\ninput UserUpdateOneRequiredWithoutPostInput {\n  create: UserCreateWithoutPostInput\n  connectOrCreate: UserCreateOrConnectWithoutPostInput\n  upsert: UserUpsertWithoutPostInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutPostInput\n}\n\ninput PostUpdateInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutPostInput\n}\n\ninput PostUpdateManyMutationInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput PostCreateWithoutUserInput {\n  body: String!\n  created_at: DateTime\n}\n\ninput PostCreateOrConnectWithoutUserInput {\n  where: PostWhereUniqueInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostCreateNestedManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  connect: PostWhereUniqueInput\n}\n\ninput UserCreateInput {\n  username: String!\n  created_at: DateTime\n  Post: PostCreateNestedManyWithoutUserInput\n}\n\ninput PostUpdateWithoutUserInput {\n  body: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ninput PostUpsertWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  update: PostUpdateWithoutUserInput!\n  create: PostCreateWithoutUserInput!\n}\n\ninput PostUpdateWithWhereUniqueWithoutUserInput {\n  where: PostWhereUniqueInput!\n  data: PostUpdateWithoutUserInput!\n}\n\ninput PostScalarWhereInput {\n  AND: PostScalarWhereInput\n  OR: [PostScalarWhereInput]\n  NOT: PostScalarWhereInput\n  id: IntFilter\n  body: StringFilter\n  author_id: IntFilter\n  created_at: DateTimeFilter\n}\n\ninput PostUpdateManyWithWhereWithoutUserInput {\n  where: PostScalarWhereInput!\n  data: PostUpdateManyMutationInput!\n}\n\ninput PostUpdateManyWithoutUserInput {\n  create: PostCreateWithoutUserInput\n  connectOrCreate: PostCreateOrConnectWithoutUserInput\n  upsert: PostUpsertWithWhereUniqueWithoutUserInput\n  set: PostWhereUniqueInput\n  disconnect: PostWhereUniqueInput\n  delete: PostWhereUniqueInput\n  connect: PostWhereUniqueInput\n  update: PostUpdateWithWhereUniqueWithoutUserInput\n  updateMany: PostUpdateManyWithWhereWithoutUserInput\n  deleteMany: PostScalarWhereInput\n}\n\ninput UserUpdateInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n  Post: PostUpdateManyWithoutUserInput\n}\n\ninput UserUpdateManyMutationInput {\n  username: StringFieldUpdateOperationsInput\n  created_at: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnePost(data: PostCreateInput!): Post\n  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post\n  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput\n  deleteManyPost(where: PostWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n  executeRaw(query: String!, parameters: [String]): Int!\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nscalar Bytes\n\ntype _Row {\n  ID: ID!\n  Int: Int!\n  Float: Float!\n  String: String!\n  Boolean: Boolean!\n  DateTime: DateTime!\n  JSON: JSON!\n  Object: _Row!\n  Array: [_Row!]!\n  OptionalID: ID\n  OptionalInt: Int\n  OptionalFloat: Float\n  OptionalString: String\n  OptionalBoolean: Boolean\n  OptionalDateTime: DateTime\n  OptionalJSON: JSON\n  OptionalObject: _Row\n  OptionalArray: [_Row!]\n}",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UserCountOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_User",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_Post",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_PostCountAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_PostAvgAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_PostSumAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_PostMinAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_PostMaxAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_AggregatePost",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_PostGroupByOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UserCountAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UserAvgAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UserSumAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UserMinAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UserMaxAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_AggregateUser",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UserGroupByOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "_Row",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        }
      ],
      "fieldConfigurations": [
        {
          "typeName": "db_User",
          "fieldName": "Post",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "Post"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findFirstPost",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findFirstPost"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findManyPost",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findManyPost"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_aggregatePost",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "aggregatePost"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_groupByPost",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "by",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "having",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "groupByPost"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findUniquePost",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findUniquePost"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findFirstUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findFirstUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findManyUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findManyUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_aggregateUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "aggregateUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_groupByUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "by",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "having",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "groupByUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findUniqueUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findUniqueUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_queryRaw",
          "argumentsConfiguration": [
            {
              "name": "query",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "parameters",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "queryRaw"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_queryRawJSON",
          "argumentsConfiguration": [
            {
              "name": "query",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "parameters",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "queryRawJSON"
          ],
          "requiresFields": [],
          "unescapeResponseJson": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_createOnePost",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "createOnePost"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_upsertOnePost",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "create",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "update",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "upsertOnePost"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_deleteOnePost",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteOnePost"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_updateOnePost",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateOnePost"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_updateManyPost",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateManyPost"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_deleteManyPost",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteManyPost"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_createOneUser",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "createOneUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_upsertOneUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "create",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "update",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "upsertOneUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_deleteOneUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteOneUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_updateOneUser",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateOneUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_updateManyUser",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateManyUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_deleteManyUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteManyUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_executeRaw",
          "argumentsConfiguration": [
            {
              "name": "query",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "parameters",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "executeRaw"
          ],
          "requiresFields": [],
          "unescapeResponseJson": true
        },
        {
          "typeName": "db__Row",
          "fieldName": "JSON",
          "argumentsConfiguration": [],
          "disableDefaultFieldMapping": false,
          "path": [
            "JSON"
          ],
          "requiresFields": [],
          "unescapeResponseJson": true
        },
        {
          "typeName": "db__Row",
          "fieldName": "OptionalJSON",
          "argumentsConfiguration": [],
          "disableDefaultFieldMapping": false,
          "path": [
            "OptionalJSON"
          ],
          "requiresFields": [],
          "unescapeResponseJson": true
        },
        {
          "fieldName": "db_queryRaw",
          "typeName": "Mutation",
          "unescapeResponseJson": true,
          "argumentsConfiguration": [],
          "path": [
            "queryRaw"
          ],
          "requiresFields": [],
          "disableDefaultFieldMapping": false
        },
        {
          "typeName": "db_UserCountOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_User",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_Post",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_PostCountAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_PostAvgAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_PostSumAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_PostMinAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_PostMaxAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_AggregatePost",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_PostGroupByOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UserCountAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UserAvgAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UserSumAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UserMinAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UserMaxAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_AggregateUser",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UserGroupByOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_AffectedRowsOutput",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "_Row",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        }
      ],
      "typeConfigurations": [
        {
          "typeName": "db_NestedIntFilter",
          "renameTo": "NestedIntFilter"
        },
        {
          "typeName": "db_IntFilter",
          "renameTo": "IntFilter"
        },
        {
          "typeName": "db_NestedStringFilter",
          "renameTo": "NestedStringFilter"
        },
        {
          "typeName": "db_StringFilter",
          "renameTo": "StringFilter"
        },
        {
          "typeName": "db_NestedDateTimeFilter",
          "renameTo": "NestedDateTimeFilter"
        },
        {
          "typeName": "db_DateTimeFilter",
          "renameTo": "DateTimeFilter"
        },
        {
          "typeName": "db_PostListRelationFilter",
          "renameTo": "PostListRelationFilter"
        },
        {
          "typeName": "db_UserWhereInput",
          "renameTo": "UserWhereInput"
        },
        {
          "typeName": "db_UserRelationFilter",
          "renameTo": "UserRelationFilter"
        },
        {
          "typeName": "db_PostWhereInput",
          "renameTo": "PostWhereInput"
        },
        {
          "typeName": "db_SortOrder",
          "renameTo": "SortOrder"
        },
        {
          "typeName": "db_PostOrderByRelationAggregateInput",
          "renameTo": "PostOrderByRelationAggregateInput"
        },
        {
          "typeName": "db_UserOrderByWithRelationInput",
          "renameTo": "UserOrderByWithRelationInput"
        },
        {
          "typeName": "db_PostOrderByWithRelationInput",
          "renameTo": "PostOrderByWithRelationInput"
        },
        {
          "typeName": "db_PostWhereUniqueInput",
          "renameTo": "PostWhereUniqueInput"
        },
        {
          "typeName": "db_PostScalarFieldEnum",
          "renameTo": "PostScalarFieldEnum"
        },
        {
          "typeName": "db_UserCountOutputType",
          "renameTo": "UserCountOutputType"
        },
        {
          "typeName": "db_User",
          "renameTo": "User"
        },
        {
          "typeName": "db_Post",
          "renameTo": "Post"
        },
        {
          "typeName": "db_PostCountAggregateOutputType",
          "renameTo": "PostCountAggregateOutputType"
        },
        {
          "typeName": "db_PostAvgAggregateOutputType",
          "renameTo": "PostAvgAggregateOutputType"
        },
        {
          "typeName": "db_PostSumAggregateOutputType",
          "renameTo": "PostSumAggregateOutputType"
        },
        {
          "typeName": "db_PostMinAggregateOutputType",
          "renameTo": "PostMinAggregateOutputType"
        },
        {
          "typeName": "db_PostMaxAggregateOutputType",
          "renameTo": "PostMaxAggregateOutputType"
        },
        {
          "typeName": "db_AggregatePost",
          "renameTo": "AggregatePost"
        },
        {
          "typeName": "db_PostCountOrderByAggregateInput",
          "renameTo": "PostCountOrderByAggregateInput"
        },
        {
          "typeName": "db_PostAvgOrderByAggregateInput",
          "renameTo": "PostAvgOrderByAggregateInput"
        },
        {
          "typeName": "db_PostMaxOrderByAggregateInput",
          "renameTo": "PostMaxOrderByAggregateInput"
        },
        {
          "typeName": "db_PostMinOrderByAggregateInput",
          "renameTo": "PostMinOrderByAggregateInput"
        },
        {
          "typeName": "db_PostSumOrderByAggregateInput",
          "renameTo": "PostSumOrderByAggregateInput"
        },
        {
          "typeName": "db_PostOrderByWithAggregationInput",
          "renameTo": "PostOrderByWithAggregationInput"
        },
        {
          "typeName": "db_NestedFloatFilter",
          "renameTo": "NestedFloatFilter"
        },
        {
          "typeName": "db_NestedIntWithAggregatesFilter",
          "renameTo": "NestedIntWithAggregatesFilter"
        },
        {
          "typeName": "db_IntWithAggregatesFilter",
          "renameTo": "IntWithAggregatesFilter"
        },
        {
          "typeName": "db_NestedStringWithAggregatesFilter",
          "renameTo": "NestedStringWithAggregatesFilter"
        },
        {
          "typeName": "db_StringWithAggregatesFilter",
          "renameTo": "StringWithAggregatesFilter"
        },
        {
          "typeName": "db_NestedDateTimeWithAggregatesFilter",
          "renameTo": "NestedDateTimeWithAggregatesFilter"
        },
        {
          "typeName": "db_DateTimeWithAggregatesFilter",
          "renameTo": "DateTimeWithAggregatesFilter"
        },
        {
          "typeName": "db_PostScalarWhereWithAggregatesInput",
          "renameTo": "PostScalarWhereWithAggregatesInput"
        },
        {
          "typeName": "db_PostGroupByOutputType",
          "renameTo": "PostGroupByOutputType"
        },
        {
          "typeName": "db_UserWhereUniqueInput",
          "renameTo": "UserWhereUniqueInput"
        },
        {
          "typeName": "db_UserScalarFieldEnum",
          "renameTo": "UserScalarFieldEnum"
        },
        {
          "typeName": "db_UserCountAggregateOutputType",
          "renameTo": "UserCountAggregateOutputType"
        },
        {
          "typeName": "db_UserAvgAggregateOutputType",
          "renameTo": "UserAvgAggregateOutputType"
        },
        {
          "typeName": "db_UserSumAggregateOutputType",
          "renameTo": "UserSumAggregateOutputType"
        },
        {
          "typeName": "db_UserMinAggregateOutputType",
          "renameTo": "UserMinAggregateOutputType"
        },
        {
          "typeName": "db_UserMaxAggregateOutputType",
          "renameTo": "UserMaxAggregateOutputType"
        },
        {
          "typeName": "db_AggregateUser",
          "renameTo": "AggregateUser"
        },
        {
          "typeName": "db_UserCountOrderByAggregateInput",
          "renameTo": "UserCountOrderByAggregateInput"
        },
        {
          "typeName": "db_UserAvgOrderByAggregateInput",
          "renameTo": "UserAvgOrderByAggregateInput"
        },
        {
          "typeName": "db_UserMaxOrderByAggregateInput",
          "renameTo": "UserMaxOrderByAggregateInput"
        },
        {
          "typeName": "db_UserMinOrderByAggregateInput",
          "renameTo": "UserMinOrderByAggregateInput"
        },
        {
          "typeName": "db_UserSumOrderByAggregateInput",
          "renameTo": "UserSumOrderByAggregateInput"
        },
        {
          "typeName": "db_UserOrderByWithAggregationInput",
          "renameTo": "UserOrderByWithAggregationInput"
        },
        {
          "typeName": "db_UserScalarWhereWithAggregatesInput",
          "renameTo": "UserScalarWhereWithAggregatesInput"
        },
        {
          "typeName": "db_UserGroupByOutputType",
          "renameTo": "UserGroupByOutputType"
        },
        {
          "typeName": "db_UserCreateWithoutPostInput",
          "renameTo": "UserCreateWithoutPostInput"
        },
        {
          "typeName": "db_UserCreateOrConnectWithoutPostInput",
          "renameTo": "UserCreateOrConnectWithoutPostInput"
        },
        {
          "typeName": "db_UserCreateNestedOneWithoutPostInput",
          "renameTo": "UserCreateNestedOneWithoutPostInput"
        },
        {
          "typeName": "db_PostCreateInput",
          "renameTo": "PostCreateInput"
        },
        {
          "typeName": "db_StringFieldUpdateOperationsInput",
          "renameTo": "StringFieldUpdateOperationsInput"
        },
        {
          "typeName": "db_DateTimeFieldUpdateOperationsInput",
          "renameTo": "DateTimeFieldUpdateOperationsInput"
        },
        {
          "typeName": "db_UserUpdateWithoutPostInput",
          "renameTo": "UserUpdateWithoutPostInput"
        },
        {
          "typeName": "db_UserUpsertWithoutPostInput",
          "renameTo": "UserUpsertWithoutPostInput"
        },
        {
          "typeName": "db_UserUpdateOneRequiredWithoutPostInput",
          "renameTo": "UserUpdateOneRequiredWithoutPostInput"
        },
        {
          "typeName": "db_PostUpdateInput",
          "renameTo": "PostUpdateInput"
        },
        {
          "typeName": "db_PostUpdateManyMutationInput",
          "renameTo": "PostUpdateManyMutationInput"
        },
        {
          "typeName": "db_AffectedRowsOutput",
          "renameTo": "AffectedRowsOutput"
        },
        {
          "typeName": "db_PostCreateWithoutUserInput",
          "renameTo": "PostCreateWithoutUserInput"
        },
        {
          "typeName": "db_PostCreateOrConnectWithoutUserInput",
          "renameTo": "PostCreateOrConnectWithoutUserInput"
        },
        {
          "typeName": "db_PostCreateNestedManyWithoutUserInput",
          "renameTo": "PostCreateNestedManyWithoutUserInput"
        },
        {
          "typeName": "db_UserCreateInput",
          "renameTo": "UserCreateInput"
        },
        {
          "typeName": "db_PostUpdateWithoutUserInput",
          "renameTo": "PostUpdateWithoutUserInput"
        },
        {
          "typeName": "db_PostUpsertWithWhereUniqueWithoutUserInput",
          "renameTo": "PostUpsertWithWhereUniqueWithoutUserInput"
        },
        {
          "typeName": "db_PostUpdateWithWhereUniqueWithoutUserInput",
          "renameTo": "PostUpdateWithWhereUniqueWithoutUserInput"
        },
        {
          "typeName": "db_PostScalarWhereInput",
          "renameTo": "PostScalarWhereInput"
        },
        {
          "typeName": "db_PostUpdateManyWithWhereWithoutUserInput",
          "renameTo": "PostUpdateManyWithWhereWithoutUserInput"
        },
        {
          "typeName": "db_PostUpdateManyWithoutUserInput",
          "renameTo": "PostUpdateManyWithoutUserInput"
        },
        {
          "typeName": "db_UserUpdateInput",
          "renameTo": "UserUpdateInput"
        },
        {
          "typeName": "db_UserUpdateManyMutationInput",
          "renameTo": "UserUpdateManyMutationInput"
        },
        {
          "typeName": "db_Bytes",
          "renameTo": "Bytes"
        }
      ]
    },
    "s3UploadConfiguration": [],
    "corsConfiguration": {
      "maxAge": 120,
      "allowedHeaders": [
        "*"
      ],
      "allowedMethods": [
        "GET",
        "POST"
      ],
      "exposedHeaders": [
        "*"
      ],
      "allowCredentials": true,
      "allowedOrigins": [
        {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": "http://127.0.0.1:3000"
        },
        {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": "http://localhost:3000"
        },
        {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "WG_ALLOWED_ORIGIN"
        }
      ]
    },
    "authenticationConfig": {
      "cookieBased": {
        "providers": [],
        "authorizedRedirectUris": [],
        "authorizedRedirectUriRegexes": [],
        "blockKey": {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": ""
        },
        "hashKey": {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": ""
        },
        "csrfSecret": {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": ""
        }
      },
      "hooks": {
        "postAuthentication": false,
        "mutatingPostAuthentication": false,
        "revalidateAuthentication": false,
        "postLogout": false
      },
      "jwksBased": {
        "providers": []
      },
      "publicClaims": []
    },
    "allowedHostNames": [],
    "webhooks": [],
    "nodeOptions": {
      "nodeUrl": {
        "kind": 1,
        "staticVariableContent": "",
        "placeholderVariableName": "",
        "environmentVariableDefaultValue": "http://localhost:9991",
        "environmentVariableName": "WG_NODE_URL"
      },
      "publicNodeUrl": {
        "kind": 1,
        "staticVariableContent": "",
        "placeholderVariableName": "",
        "environmentVariableDefaultValue": "http://localhost:9991",
        "environmentVariableName": "WG_PUBLIC_NODE_URL"
      },
      "listen": {
        "host": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "localhost",
          "environmentVariableName": "WG_NODE_HOST"
        },
        "port": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "9991",
          "environmentVariableName": "WG_NODE_PORT"
        }
      },
      "logger": {
        "level": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "info",
          "environmentVariableName": "WG_LOG_LEVEL"
        }
      },
      "defaultRequestTimeoutSeconds": 0
    },
    "serverOptions": {
      "serverUrl": {
        "kind": 1,
        "staticVariableContent": "",
        "placeholderVariableName": "",
        "environmentVariableDefaultValue": "http://localhost:9992",
        "environmentVariableName": "WG_SERVER_URL"
      },
      "listen": {
        "host": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "localhost",
          "environmentVariableName": "WG_SERVER_HOST"
        },
        "port": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "9992",
          "environmentVariableName": "WG_SERVER_PORT"
        }
      },
      "logger": {
        "level": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "info",
          "environmentVariableName": "WG_LOG_LEVEL"
        }
      }
    }
  },
  "dangerouslyEnableGraphQLEndpoint": false
}